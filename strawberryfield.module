<?php
/**
 * @file
 * Contains strawberryfield.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\ContentEntityInterface;


/**
 * Implements hook_node_insert().
 *
 * @param \Drupal\node\NodeInterface $node
 */
function strawberryfield_node_insert(NodeInterface $node) {
  strawberryfield_invalidate_fieldefinition_caches($node);
}


/**
 * Invalidate the cache for strawberryfields field type defintions.
 *
 * @param \Drupal\node\NodeInterface $node
 */
function strawberryfield_invalidate_fieldefinition_caches(NodeInterface $node) {

  //@TODO do the same for StrawberryfieldKeyNameProvider Plugins
  if ($node->isPublished() && $node->isDefaultRevision()) {
    $needscleaning = FALSE;
    $strawberry_field_class = $class = \Drupal::service('plugin.manager.field.field_type')->getPluginClass('strawberryfield_field');
    foreach ($node->getFieldDefinitions() as $field) {
      $field_name = $field->getName();
      $class = $field->getItemDefinition()->getClass();
      $is_ripe = ($class === $strawberry_field_class) || is_subclass_of(
          $class,
          $strawberry_field_class
        );
      if ($is_ripe) {
        //@TODO lets accumulate the keys and put then in a new entity type @context
        $needscleaning = TRUE;
      }
    }

    if ($needscleaning) {
      \Drupal::service('plugin.manager.field.field_type')->clearCachedDefinitions();
    }
  }
}

function strawberryfield_node_presave(ContentEntityInterface $entity) {

  $field_item_lists = $entity->getFields();
  $newlycreatedcount = 0;
  //@TODO refactor this as part of the AS/event driven architecture
  // And make all this efforts JSON based plugins.
  foreach ($field_item_lists as $field)
    $type = $field->getFieldDefinition()->getType();
  if ($type == 'strawberryfield_field') {
    if (!$field->isEmpty) {
      $jsonkeys = [];
      $jsonkeys = $field->{'str_flatten_keys'};
      foreach ($jsonkeys as $path) {
        // Since our keys will be jsonpaths, we can explode them first by dot
        $path_parts_raw = [];
        $path_parts_raw = explode(".", $path);
        $terms = [];
        $terms = new CachingIterator(
          new ArrayIterator($path_parts_raw)
        );
        $term_path = [];
        foreach ($terms as $json_node) {
          if ($terms->hasNext()) {
            $next = $terms->getInnerIterator()->current();
            if ($next == '[*]' || $next == '*') {
              $term_path[] = $json_node . "." . $next;
              continue;
            }
          }
          if ($json_node != '[*]' && $json_node != '*') {
            $term_path[] = $json_node;
          }
          $parent_id = 0;
          $term_path = array_filter($term_path);
          $breadcrumb = '';
          foreach ($term_path as $path) {
            $breadcrumb = empty($breadcrumb)? $path: $breadcrumb.'.'.$path;
            $query = \Drupal::entityQuery('taxonomy_term');
            $query->condition('vid', "strawberryfield_voc_id");
            $query->condition('name', $path);
            $query->condition('parent', $parent_id, 'IN');
            $tids = $query->execute();
            if (count($tids) == 0) {
              $new_term = \Drupal\taxonomy\Entity\Term::create(
                [
                  'vid' => 'strawberryfield_voc_id',
                  'name' => $path,
                  'parent' => $parent_id,
                  'field_jsonpath' => $breadcrumb,
                ]
              );
              $newlycreatedcount++;
              $new_term->enforceIsNew();
              $new_term->save();
              $parent_id = $new_term->id();
            }
            else {
              //Assuming parent is there
              foreach ($tids as $terms_id) {
                $parent_id = $terms_id;
              }
            }

          }
        }
      }
    if ($newlycreatedcount > 0) {
      \Drupal::messenger()->addStatus(t('New Terms added to the vocabulary'));
    }

    }
  }
}

/**
 * Implements hook_entity_base_field_info().

function strawberryfield_field_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_types = _strawberryfieldable_get_entity_types()) {
    // Adding field to entity types.
    if (in_array($entity_type->id(), $entity_types)) {
      $fields['strawberryfield_entityreferences'] = BaseFieldDefinition::create('entity_reference')
        ->setName('strawberryfield_entityreferences')
        ->setTargetEntityTypeId($entity_type->id())
        ->setSetting('target_type', 'group_content')
        ->setLabel(t('Related to'))
        ->setTranslatable(FALSE)
        ->setComputed(TRUE)
        ->setCustomStorage(TRUE)
        ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
        ->setClass('\Drupal\gcontent_field\Field\GcontentFieldItemList')
        ->setDisplayConfigurable('form', TRUE)
        ->setDisplayConfigurable('view', TRUE)
        ->setDisplayOptions('view', [
          'label' => 'hidden',
          'type' => 'hidden',
          'weight' => 50,
        ]);
    }
  }
  return $fields;
}

/**
 * Get entities where the field should be added.

function _strawberryfieldable_get_entity_types() {
  $entity_types = [];
  $field_map = \Drupal::entityManager()->getFieldMap();
  foreach ($field_map['node'] as $field => $usage) {
    if ($usage['type'] == "strawberryfield_field")
      $entity_types = $entity_types + $usage['bundles'];
  }
}
return $entity_types;
} */