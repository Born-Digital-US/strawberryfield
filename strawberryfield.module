<?php
/**
 * @file
 * Contains strawberryfield.module.
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\strawberryfield\Event\StrawberryfieldCrudEvent;
use Drupal\strawberryfield\StrawberryfieldEventType;


/**
 * Implements hook_node_insert().
 *
 * @param \Drupal\node\NodeInterface $node
 */
function strawberryfield_node_insert(NodeInterface $node) {
  strawberryfield_invalidate_fieldefinition_caches($node);
}


/**
 * Invalidate the cache for strawberryfields field type defintions.
 *
 * @param \Drupal\node\NodeInterface $node
 */
function strawberryfield_invalidate_fieldefinition_caches(NodeInterface $node) {

  //@TODO do the same for StrawberryfieldKeyNameProvider Plugins
  if ($node->isPublished() && $node->isDefaultRevision()) {
    $needscleaning = FALSE;
    $strawberry_field_class = $class = \Drupal::service('plugin.manager.field.field_type')->getPluginClass('strawberryfield_field');
    foreach ($node->getFieldDefinitions() as $field) {
      $class = $field->getItemDefinition()->getClass();
      $is_ripe = ($class === $strawberry_field_class) || is_subclass_of(
          $class,
          $strawberry_field_class
        );
      if ($is_ripe) {
        //@TODO lets accumulate the keys and put then in a new entity type @context
        $needscleaning = TRUE;
      }
    }

    if ($needscleaning) {
      \Drupal::service('plugin.manager.field.field_type')->clearCachedDefinitions();
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * {@inheritdoc}
 */
function strawberryfield_node_presave(ContentEntityInterface $entity) {

  if ($sbf_fields = strawberryfield_bears_strawberryfield($entity)) {
    $event_type = StrawberryfieldEventType::PRESAVE;
    $event = new StrawberryfieldCrudEvent($event_type, $entity, $sbf_fields);
    /** @var \Symfony\Component\EventDispatcher\EventDispatcher $dispatcher */
    $dispatcher = \Drupal::service('event_dispatcher');
    $dispatcher->dispatch($event_type, $event);
  }

}

/**
 * Checks if Content entity bears SBF and if so returns machine names
 *
 * This function statically caches per Bundle and entity type the results.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *
 * @return array
 *  Returns a numberic keyed array with machine names for the SBF fields
 */
function strawberryfield_bears_strawberryfield(ContentEntityInterface $entity) {
  $hassbf = &drupal_static(__FUNCTION__);
  $entitytype = $entity->getEntityTypeId();
  $bundle = $entity->bundle();
  $key = $entitytype . ":" . $bundle;
  if (!isset($hassbf[$key])) {
    $hassbf[$key] = [];
    $field_item_lists = $entity->getFields();
    foreach ($field_item_lists as $field) {
      if ($field->getFieldDefinition()->getType() == 'strawberryfield_field') {
        $hassbf[$key][] = $field->getFieldDefinition()->getName();
      }
    }
  }
  return $hassbf[$key];
}